name: CI/CD Pipeline for Notejam Flask Application
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Run linting
      #   run: |
      #     pip install flake8
      #     flake8 .

      # - name: Run security scanning
      #   uses: snyk/actions/python@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR Repository
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ github.ref == 'refs/heads/main' && 'prod-task' || 'dev-task' }} --query taskDefinition > task-definition.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ github.ref == 'refs/heads/main' && secrets.PROD_ECS_CLUSTER || secrets.DEV_ECS_CLUSTER }}
          service: ${{ github.ref == 'refs/heads/main' && secrets.PROD_ECS_SERVICE || secrets.DEV_ECS_SERVICE }}
          task-definition: task-definition.json
          container-name: ${{ github.ref == 'refs/heads/main' && 'prod-container' || 'dev-container' }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Verify ECS service health
        run: |
          aws ecs describe-services \
            --cluster ${{ github.ref == 'refs/heads/main' && secrets.PROD_ECS_CLUSTER || secrets.DEV_ECS_CLUSTER }} \
            --services ${{ github.ref == 'refs/heads/main' && secrets.PROD_ECS_SERVICE || secrets.DEV_ECS_SERVICE }} \
            --query 'services[0].deployments'

      # - name: Send success notification
      #   if: success()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: Deployment to ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'STAGING' }} succeeded!
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # rollback:
  #   needs: [build, deploy]
  #   runs-on: ubuntu-latest
  #   if: failure()
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  
  #     - name: Rollback ECS Deployment
  #       run: |
  #         aws ecs update-service --cluster ${{ github.ref == 'refs/heads/main' && secrets.PROD_ECS_CLUSTER || secrets.DEV_ECS_CLUSTER }} \
  #                                --service ${{ github.ref == 'refs/heads/main' && secrets.PROD_ECS_SERVICE || secrets.DEV_ECS_SERVICE }} \
  #                                --task-definition ${{ github.ref == 'refs/heads/main' && 'prod-task' || 'dev-task' }}:${{ github.event.before }}
  
  #     - name: Send rollback notification
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: ${{ job.status }}
  #         text: Deployment failed. Rolled back to previous version.
  #         webhook_url: ${{ secrets.SLACK_WEBHOOK }}
